import React, { useState, useEffect, useRef } from "react";
import { SafeAreaView } from "react-native-safe-area-context";
import { View, Image, TouchableOpacity, Text, ScrollView, Animated, StyleSheet, Dimensions, } from "react-native";

import { sporticons } from "../../constants";
import useAppwrite from "../../lib/useAppwrite";
import { getTrainingsForYou, getCurrentUser } from "../../lib/appwrite";
import { Svg } from "react-native-svg";

const Train = () => {
  const { data: trainings } = useAppwrite(() => getTrainingsForYou(['0', '1']));

  const { data: user, isLoading: trainingsLoading } = useAppwrite(getCurrentUser);
  
  const [updatedSports, setUpdatedSports] = useState([]);

  useEffect(() => {
    if (user) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let sports = user.sports || []; // –ï—Å–ª–∏ sports –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤

      const types = [
        { title: '–í—Å–µ', key: 'all' },
        { title: '–ë–µ–≥', key: '0' },
        { title: '–ö–∞—á–∞–ª–∫–∞', key: '1' },
        { title: '–í–µ–ª–æ—Å–∏–ø–µ–¥', key: '2' },
        { title: '–ü–ª–∞–≤–∞–Ω–∏–µ', key: '3' },
        { title: '–¢–µ–Ω–Ω–∏—Å', key: '4' },
        { title: '–ë–∞—Å–∫–µ—Ç–±–æ–ª', key: '5' }
      ];

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ –æ–±—ä–µ–∫—Ç
      let updated = sports.map(key => {
        let sport = types.find(sport => sport.key === key);
        return sport || { title: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', key: key };
      });

      updated.unshift(types[0]);

      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      if (updated.length < 5) {
        let existingKeys = new Set(updated.map(sport => sport.key));
        types.forEach(sport => {
          if (!existingKeys.has(sport.key) && updated.length < 5) {
            updated.push(sport);
          }
        });
      }

      setUpdatedSports(updated); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º
    }
  }, [user]); // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  const [current, setCurrent] = useState(
    {
      title: '–í—Å–µ',
      key: 'all'
    }
    )  

    const { height } = Dimensions.get('window');
    
  const [visible, setVisible] = useState(false);
  const slideAnimation = useRef(new Animated.Value(height)).current;

    const showNotification = () => {
      setVisible(true);
      Animated.timing(slideAnimation, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }).start();
    };
  
    const hideNotification = () => {
      Animated.timing(slideAnimation, {
        toValue: height,
        duration: 300,
        useNativeDriver: true,
      }).start(() => setVisible(false));
    };

  const filteredTrainings = current.key === 'all' 
  ? trainings
  : trainings.filter(train => train.kind === current.key)

  return (
    <SafeAreaView className="bg-white h-full">
      <Text className="font-pbold text-[27px] mx-4 mt-3 mb-3">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</Text>
    <View>
    <ScrollView horizontal={true} className="flex px-3">
        {updatedSports.map(type =>
          <TouchableOpacity className="flex rounded-xl pt-1 pb-2 px-4 mx-1"
          key={type.key}
          onPress={() => {setCurrent({title: type.title, key: type.key})}}
          activeOpacity={0.9}
          style={{
            backgroundColor: current.key == type.key ?  '#30d158' : '#f3f3f3',
          }}
          > 
            <Text className="flex text-[16px] font-pmedium"
            style={{
              color: current.key == type.key ?  '#fff' : '#676767',
            }}
            >{type.title}</Text>
          </TouchableOpacity>
        )}
    </ScrollView>
    </View>

    <TouchableOpacity className="bg-[#f3f3f3] mx-4 mt-4 h-[120px] rounded-3xl flex justify-center"
    activeOpacity={0.85}
    onPress={showNotification}
    >
        <Text className="font-psemibold text-lg text-[#333] text-center">–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é +</Text>
    </TouchableOpacity>


    <Text className="font-pbold text-[27px] mx-4 mt-2 mb-3">–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ</Text>
    

  {filteredTrainings.length == 0 ? (
    <Text className="text-center text-[#676767] text-lg mx-4 mt-4">–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç :(</Text>
  ) : (

  filteredTrainings.map(train => {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
    const date = new Date(train.date);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –º–µ—Å—è—Ü–∞–º–∏
    const months = [
      "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
      "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ];
    const types = ['–ë–µ–≥ üèÉ', '–ö–∞—á–∞–ª–∫–∞ üèãÔ∏è‚Äç‚ôÇÔ∏è', '–í–µ–ª–æ—Å–ø–µ–¥', '–ü–ª–∞–≤–∞–Ω–∏–µ'];
    const iconstypes = ['running', 'gym', 'cycling', 'swimming'];
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const month = months[date.getUTCMonth()];
    const day = date.getUTCDate();
    const hours = date.getUTCHours();
    const minutes = date.getUTCMinutes();

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    const formattedDate = `${day} ${month}, ${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
    const formattedType = types[Number(train.kind)];
    const formattedIcon = iconstypes[Number(train.kind)];

    return (
      <View key={train.id} className="mx-4 h-[120px] bg-[#f7f7f7] px-4 py-2 rounded-2xl overflow-hidden mb-4">
        <Text className="font-pbold text-xl text-[#333]">{train.title}</Text>
        <Text className="font-pregular text-xl text-[#676767]">{formattedDate}</Text>
        <Text className="font-pregular text-xl text-[#676767]">{formattedType}</Text>
        <Svg
          source={sporticons[formattedIcon]}
          className="absolute right-[-5px] top-[-5px] w-[130px] h-[130px] overflow-hidden"
        />
      </View>
    );
})
)}


{visible && (
        <Animated.View className="absolute w-full bg-white h-[100vh] py-[36px] px-4" style={[{ transform: [{ translateY: slideAnimation }] }]}>
          <Text className="font-pbold text-2xl">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–º–µ—Å—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</Text>
          <Text className="font-psemibold text-xl text-[#333]">–í–∏–¥ —Å–ø–æ—Ä—Ç–∞</Text>
          
          <TouchableOpacity onPress={hideNotification} className="">
            <Text className="mt-[70vh] text-center">–ó–∞–∫—Ä—ã—Ç—å</Text>
          </TouchableOpacity>
        </Animated.View>
      )}
</SafeAreaView>
  );
};

export default Train;